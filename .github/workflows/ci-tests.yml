name: CI

on:
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
       include:
        - DB: "mariadb"
          TYPE: "server"
          JOB_NAME: "Python MariaDB"
          RUN_COMMAND: bench --verbose --site test_site run-tests --coverage

        - DB: "postgres"
          TYPE: "server"
          JOB_NAME: "Python PostgreSQL"
          RUN_COMMAND: bench --verbose --site test_site run-tests --coverage

        - DB: "mariadb"
          TYPE: "ui"
          JOB_NAME: "UI MariaDB"
          RUN_COMMAND:  bench --site test_site run-ui-tests frappe --headless

    name: ${{ matrix.JOB_NAME }}

    services:
      mysql:
        image: mariadb:10.3
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: YES
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3

      postgres:
        image: postgres:9.5
        env:
          POSTGRES_PASSWORD: travis
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Clone
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - uses: actions/setup-node@v2
        with:
          node-version: '12'
          check-latest: true

      - name: Add to Hosts
        run: |
          echo "127.0.0.1 test_site" | sudo tee -a /etc/hosts
          echo "127.0.0.1 test_site_producer" | sudo tee -a /etc/hosts

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache cypress binary
        uses: actions/cache@v2
        with:
          path: ~/.cache
          key: ${{ runner.os }}-cypress-
          restore-keys: |
            ${{ runner.os }}-cypress-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: bash ${GITHUB_WORKSPACE}/.github/helper/install_dependencies.sh
        env:
          BEFORE: ${{ env.GITHUB_EVENT_PATH.before }}
          AFTER: ${{ env.GITHUB_EVENT_PATH.after }}
          TYPE: ${{ matrix.TYPE }}

      - name: Install
        run: bash ${GITHUB_WORKSPACE}/.github/helper/install.sh
        env:
          DB: ${{ matrix.DB }}
          TYPE: ${{ matrix.TYPE }}

      - name: Run Set-Up
        if: matrix.TYPE == 'ui'
        run: cd ~/frappe-bench/ && bench --site test_site execute frappe.utils.install.complete_setup_wizard
        env:
          DB: ${{ matrix.DB }}
          TYPE: ${{ matrix.TYPE }}

      - name: Run Tests
        run: cd ~/frappe-bench/ && ${{ matrix.RUN_COMMAND }}
        env:
          DB: ${{ matrix.DB }}
          TYPE: ${{ matrix.TYPE }}

      - name: Coverage
        if: matrix.TYPE == 'server'
        run: |
          cp ~/frappe-bench/sites/.coverage ${GITHUB_WORKSPACE}
          cd ${GITHUB_WORKSPACE}
          pip install coveralls==2.2.0
          pip install coverage==4.5.4
          coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_TOKEN }}